class Solution {
    boolean[] prime;
    public long countPaths(int n, int[][] edges) {
        List<Integer>[] graph = new ArrayList[n+1];
        int[] blockSize = new int[n+1];
        prime = new boolean[n+1];
        for(int i=1;i<=n;i++) {
            graph[i] = new ArrayList<>();
            prime[i] = isPrime(i);
        }
        for(int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        long res = 0;
        for(int i =1 ;i<=n;i++) {
            if(!prime[i]) {
                continue;
            }
            int nodeSize = 0;
            for(int node : graph[i]) {
                if(prime[node]) {
                    continue;
                }
                if(blockSize[node] == 0) {
                    List<Integer> blockList = new ArrayList<>();
                     dfs(node,graph,i,blockList);
                     for(int block : blockList) {
                        blockSize[block] = blockList.size();
                    }
                }
                res += blockSize[node] * nodeSize;
                nodeSize += blockSize[node];
            }
            res += nodeSize;
        }
        return res;
    }

    private void dfs(int node,List<Integer>[] graph,int father,List<Integer> blockList) {
        blockList.add(node);
        for(int child : graph[node]) {
            if(child != father &&!prime[child] ) {
                dfs(child,graph,node,blockList);
            }
        }
    }

    private boolean isPrime(int n) {
        if(n==1) {
            return false;
        }
        for(int i =2;i*i<=n;i++) {
            if(n%i==0) {
                return false;
            }
        }
        return true;
    }
}
//runtime:48 ms
//memory:87.6 MB
