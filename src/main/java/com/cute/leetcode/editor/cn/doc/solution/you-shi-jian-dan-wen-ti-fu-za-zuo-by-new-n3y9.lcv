Problem: [2834. 找出美丽数组的最小和](https://leetcode.cn/problems/find-the-minimum-possible-sum-of-a-beautiful-array/description/)

首先，如果你不看数据范围，直接无脑上来哈希+遍历，那么你会浪费不少时间（不会只有我这么无脑吧），在这里，n的数据范围是1e9，因此可以猜测到这题应当是公式化$O(1)$的解法。具体的，我们来看有哪些数不能选，假设现在target=8，有以下组合:<br>
1+7 = 2+6 = 3+5 = 4+4，现在需要数组元素不重复，且要使得和最小，而5，6，7这三个数都不选（与对应的3，2，1只能二选一，显然选1，2，3更优），由于要选n个数，且除去5，6，7外，现在自然数里剩下的数里都不会有任意两个能够组合成8，因此只需从小到大凑够n个即可。

具体的，假设$l=\lfloor \frac{target}{2} \rfloor$，有$[1,...,l],[l+1,...,target-1],[target,...,\infty]$，这样三段区间，其中第二个区间的数不能选择，需要从第一个区间和第三个区间选足n个数，也即利用前n项和公式分别计算$[1,...,l],[target,...,target+n-l-1]$，所以$res=\frac{l*(l+1)}{2}+\frac{(target+n-l-1)*(target+n-l)-target*(target-1)}{2}$。这里的代码为了复习复习费马小定理和快速幂，干了比较脱裤子放屁的事情，实际上直接long long存下数据除以2就行，不需要求2在模1e9+7下的逆元，我把没求模版本的代码也放出来了，方便理解。

##### 思路

* []

```C++(内含求逆元)
class Solution {
public:
    int minimumPossibleSum(int n, int target) {
        int l=min(target/2,n),mod=1e9+7;
        auto qpow=[&](int a,int b){  //求解a^b mod p
            int res=1;
            while (b)
            {
                if(b&1) res=1LL*res*a %mod;
                a=(1LL*a*a)%mod;
                b>>=1;
            }
            return res%mod;
        };
        return ((1LL*l*(l+1)%mod + 1LL*(target+n-l-1)*(target+n-l)%mod-1LL*target*(target-1)%mod + 1LL*5*mod)%mod)*qpow(2,mod-2)%mod;
    }
};
```

* []

```C++(简洁写法)
class Solution {
public:
    int minimumPossibleSum(int n, int target) {
        long long l=min(target/2,n),mod=1e9+7;
        return (l*(l+1)/2 + (1LL*target+n-l-1)*(target+n-l)/2-1LL*target*(target-1)/2)%mod;
    }
};
```

